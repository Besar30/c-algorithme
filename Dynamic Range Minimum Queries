#include<bits/stdc++.h>
#include<string>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
using namespace std;
using namespace __gnu_pbds;
// find_by_order, order_of_key
typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> oset;
typedef tree<int, null_type, less_equal<int>, rb_tree_tag, tree_order_statistics_node_update> omset;
#define int  long long
#define endl '\n'
#define ll long long
#define all(x) x.begin(),x.end()
#define rall(x) x.rbegin(),x.rend()
#define pi pair<ll,ll>
#define f first
#define s second
#define INF 100000000000009
#define Beso ios_base::sync_with_stdio(false), cin.tie(NULL), cout.tie(0)
int oo=1e9;
const double PI=3.14159265359;
const int N=2e5+3,SQ=448;
int n=0,q=0;
int arr[N],sum_of_blocks[N];
vector<vector<int>>blocks(SQ);
// create table (num in blocks)
void process(){
    for(int i=0;i<n;i++){
        blocks[i/SQ].push_back(arr[i]);
        sum_of_blocks[i/SQ]=min(arr[i],  sum_of_blocks[i/SQ]);
    }
}
int query(int l,int r){
    int ans=1e18;
    while(l<=r){
        if(l%SQ==0&&l+SQ<=r){
            ans=min(ans,sum_of_blocks[l/SQ]);
            l+=SQ;
        }
        else{
            ans=min(ans,arr[l]);
            l++;
        }
    }
    return ans;
}
void update(int idx,int val){
    int num_of_blocks=idx/SQ,idx_in_block=idx%SQ;

    blocks[num_of_blocks][idx_in_block]=val;
    arr[idx]=val;
    sum_of_blocks[num_of_blocks]=*min_element( blocks[num_of_blocks].begin(), blocks[num_of_blocks].end());
}
void interstaller(){
    cin>>n>>q;
    for(int i=0;i<n;i++){
        cin>>arr[i];
    }
    fill(sum_of_blocks,sum_of_blocks+N,1e18);
    process();
    while(q--){
        int op;cin>>op;
        if(op==1){
            int idx,val;cin>>idx>>val;
            update(--idx,val);
        }
        else{
            int l=0,r=0;
            cin>>l>>r;
            cout<<query(--l,--r)<<endl;
        }
    }
}
int32_t main(){
#ifndef ONLINE_JUDGE
    freopen("Input.txt","r",stdin);
    freopen("Output.txt","w",stdout);
#endif
//    freopen("inc.in", "r", stdin);
    Beso;
    int T=1;
//    cin>>T;
    while(T--)
    {
        interstaller();
    }
    // **********************************************************************************************
}
