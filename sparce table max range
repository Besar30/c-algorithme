int n=0,m=0,t[N][22],s[N];
int merge(int a,int b){
    return max(a,b);
}
void build(){ //o(n)+nlog(n)
    for(int i=0;i<n;i++){
        t[i][0]=s[i];
    }
    //start pw =1 ---> pw=0 implement up
    for(int pw=1;(1<<pw)<=n;pw++){
        for(int i=0;i+(1<<pw)<=n;i++){
            t[i][pw]=merge(t[i][pw-1],t[i+(1<<(pw-1))][pw-1]);
        }
    }
}
int query(int l=0,int r=0){
    //size range
    int sz=r-l+1;
    int ret=0;
    for(int i=21;i>=0;i--){
        if((sz>>i)&1){
            ret= merge(ret,t[l][i]);
            l+=1<<i;
        }
    }
    return ret;
}
void interstaller(){
    cin>>n>>m;
    for(int i=0;i<n;i++){
        cin>>s[i];
    }
    build();
    for(int i=0;i<n;i++){
        for(int j=0;j<4;j++){
            cout<<t[i][j]<<" ";
        }
        cout<<endl;
    }
    while(m--){
        int l=0,r=0;
        cin>>l>>r;
        l--,r--;
        cout<<query(l,r)<<endl;
    }
}
